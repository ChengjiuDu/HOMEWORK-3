2. <div class="form">                    <fieldset>                <label>Number 1</label>                <input type="text" id="num1">            </fieldset>                    <fieldset>                <label>Number 2</label>                <input type="text" id="num2">            </fieldset>                    <fieldset>                <button id="btnAdd">Click to add</button>                <h3>Result</h3>                <span id="result">Result here</span>            </fieldset>            </div>---------------------------------------------------------------------------------------------------------In the html, I remove the “onclick” attribute residing in the “button” tag, and changed the id name inside the button tag to btnAdd in order to pair with the java code.---------------------------------------------------------------------------------------------------------const addNums = () => {    let num1 = document.getElementById("num1").value;    let num2 = document.getElementById("num2").value;    let sum = parseInt(num1, 10) + parseInt(num2, 10);    document.getElementById("result").innerHTML = sum;};const btnAdd = document.getElementById("btnAdd");btnAdd.addEventListener("click", addNums);---------------------------------------------------------------------------------------------------------In the JS file I added this “addEventListener()” to the bottom of each form as instructed. The addEventListener() method attaches a click event to the button and when the user clicks the button, it triggers the referenced function. ---------------------------------------------------------------------------------------------------------3) The difference between referenced function and called function is that a called function always have a ( ) parenthesis at the end. A referenced function is stored so that they can be called later. Example of referenced function:const addNums = () => {    let num1 = document.getElementById("num1").value;    let num2 = document.getElementById("num2").value;    let sum = parseInt(num1, 10) + parseInt(num2, 10);    document.getElementById("result").innerHTML = sum;};const btnAdd = document.getElementById("btnAdd");btnAdd.addEventListener("click", addNums);Called functions are functions that execute when they are called. Example of called/invoked function:Function name(){	  console.log(Brian);	}	 	name();	// Brian---------------------------------------------------------------------------------------------------------4) A Named function is a function that has been named after it. a named function is hoisted into the browser.      Example:function myNamedFunction(name) {     name = `Maria`;     return `My name is ${name}!` } myNamedFunction()Function expressions : A Function Expressions defines a named or anonymous function. An anonymous function is a function that has no name. Function Expressions are not hoisted, and therefore cannot be used before they are defined.Example:let addNums = function (num1, num2) {    return num1 + num2;}let sum = addNums(5, 10);console.log(sum);---------------------------------------------------------------------------------------------------------5) The difference between arrow functions, named functions, and anonymous functions Anonymous function : Functions are not always named. In Node.js for example, anonymous functions are used all the time.Functions used in expressions do not need to be named functions. That's because they are always called using the variable name in which they are stored.Example of an anonymous function pre ECMAScript 2015:const multiplyNums = function(a,b) {    return a * b;}const total = multiplyNums(6, 20);console.log(total);                Named function :A Named function is a function that has been named after it. a named function is hoisted into the browser.      Example:function myNamedFunction(name) {     name = `Maria`;     return `My name is ${name}!` } myNamedFunction()Arrow Function:Arrow functions allow us to write shorter function syntax:Example: hello = () => {  return "Hello World!";}---------------------------------------------------------------------------------------------------------6) Inside the repo called “toggle-circle”. 

---------------------------------------------------------------------------------------------------------7) window.location.reload() means/does Refresh/reload the current page. 

---------------------------------------------------------------------------------------------------------8) install and configure Git locallycreate your own local clone of a repositorycreate a new Git branchedit a file and stage your changescommit your changespush your changes to GitHubmake a pull requestmerge upstream changes into your forkmerge changes on GitHub into your local clone---------------------------------------------------------------------------------------------------------
9) .git ---------------------------------------------------------------------------------------------------------10) run command `git pull` or `git status`, and it shall return whether your local branch is updated to the remote Github repo, indicating whether you have initialized Git